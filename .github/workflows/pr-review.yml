name: Gemini PR Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR Diff
        id: pr_diff
        run: |
          # Handle different PR scenarios (new PRs, updates, etc.)
          if [ "${{ github.event.action }}" = "opened" ]; then
            # For new PRs, compare with base branch
            diff_content=$(git diff origin/${{ github.base_ref }}...HEAD)
          else
            # For updates, compare with base branch
            diff_content=$(git diff origin/${{ github.base_ref }}...HEAD)
          fi
          
          # Check if diff is empty (no changes)
          if [ -z "$diff_content" ]; then
            echo "‚ö†Ô∏è No changes detected in this PR"
            diff_content="No code changes detected in this pull request."
          fi
          
          # Check diff size and handle large PRs
          diff_size=${#diff_content}
          echo "üìä Diff size: $diff_size characters"
          
          # If diff is too large, truncate and add warning
          if [ $diff_size -gt 500000 ]; then
            echo "‚ö†Ô∏è Large PR detected (${diff_size} characters). Truncating to first 500K characters for review."
            diff_content=$(echo "$diff_content" | head -c 500000)
            diff_content="$diff_content"$'\n\n'"‚ö†Ô∏è **LARGE PR WARNING**: This PR contains more than 500K characters of changes. Only the first 500K characters are being reviewed. Consider breaking this into smaller PRs for better review quality."
          fi
          
          # Use a unique delimiter to avoid conflicts
          DELIMITER=$(openssl rand -hex 16)
          printf "diff<<%s\n%s\n%s\n" "$DELIMITER" "$diff_content" "$DELIMITER" >> $GITHUB_OUTPUT

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install GitHub CLI
        run: |
          # GitHub CLI is pre-installed on GitHub Actions runners
          # Just verify it's available
          gh --version

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install Gemini CLI
        run: |
          # Install kno-gemini-cli globally
          npm install -g kno-gemini-cli
          
          # Verify installation
          if gemini --version; then
            echo "‚úÖ Gemini CLI installed successfully"
          else
            echo "‚ùå Gemini CLI installation failed"
            exit 1
          fi

      - name: Run Gemini Review
        id: gemini_review
        env:
          GEMINI_OAUTH_CREDENTIALS_JSON: ${{ secrets.GEMINI_OAUTH_CREDENTIALS_JSON }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PR_DIFF: ${{ steps.pr_diff.outputs.diff }}
        run: |
          # Debug: Check if credentials are set
          echo "Checking OAuth credentials..."
          if [ -n "$GEMINI_OAUTH_CREDENTIALS_JSON" ]; then
            echo "‚úÖ GEMINI_OAUTH_CREDENTIALS_JSON is set"
            echo "Length: ${#GEMINI_OAUTH_CREDENTIALS_JSON} characters"
          else
            echo "‚ùå GEMINI_OAUTH_CREDENTIALS_JSON is not set"
            exit 1
          fi
          
          # Check if API key is available as fallback
          if [ -n "$GEMINI_API_KEY" ]; then
            echo "‚úÖ GEMINI_API_KEY is available as fallback"
          else
            echo "‚ö†Ô∏è GEMINI_API_KEY not set - will use OAuth only"
          fi
          
          # Debug: Check gemini command
          echo "Checking gemini command..."
          which gemini || echo "‚ùå gemini command not found in PATH"
          gemini --version || echo "‚ùå gemini --version failed"
          
          # Test OAuth authentication separately
          echo "Testing OAuth authentication..."
          echo "Checking if credentials are valid JSON..."
          if echo "$GEMINI_OAUTH_CREDENTIALS_JSON" | jq . > /dev/null 2>&1; then
            echo "‚úÖ OAuth credentials are valid JSON"
          else
            echo "‚ùå OAuth credentials are not valid JSON"
            exit 1
          fi
          
          # Create the OAuth credentials file directly to bypass web authentication
          echo "Creating OAuth credentials file..."
          mkdir -p $HOME/.gemini
          echo "$GEMINI_OAUTH_CREDENTIALS_JSON" > $HOME/.gemini/oauth_creds.json
          echo "‚úÖ OAuth credentials file created at $HOME/.gemini/oauth_creds.json"
          
          # Create a settings.json file that forces OAuth authentication
          echo '{"selectedAuthType": "oauth-personal"}' > $HOME/.gemini/settings.json
          echo "‚úÖ Settings file created at $HOME/.gemini/settings.json"
          
          # Create a language-agnostic review prompt optimized for large PRs
          cat > /tmp/review_prompt.txt << 'PROMPT_EOF'
          You are an expert software engineer with experience in multiple programming languages and frameworks. Review the following code changes for:
          
          1. **Critical issues** - Security vulnerabilities, data corruption, crashes
          2. **Major bugs** - Logic errors, edge cases, incorrect behavior
          3. **Code quality** - Readability, maintainability, best practices
          4. **Performance** - Inefficient algorithms, resource usage
          5. **Security** - Vulnerabilities, data exposure, input validation
          6. **Style & conventions** - Language-specific best practices
          7. **Documentation** - Missing comments, unclear code
          
          For large PRs, focus on the most important issues first. Provide your feedback as a clear, actionable list of points. Be specific about what should be changed and why. If the changes look good, mention that too.
          
          Code changes to review:
          PROMPT_EOF
          
          # Append the diff to the prompt file (safely handle special characters)
          # Use environment variable to safely pass the diff content
          echo "$PR_DIFF" >> /tmp/review_prompt.txt
          
          # Debug: Check the prompt file
          echo "Review prompt file created:"
          wc -l /tmp/review_prompt.txt
          echo "First few lines of prompt:"
          head -5 /tmp/review_prompt.txt
          
          # Run the review using stored OAuth credentials or API key
          echo "Running Gemini review..."
          set -o pipefail

          # First attempt with stored OAuth credentials (quick timeout)
          echo "üîê Attempting OAuth with stored credentials..."
          timeout 30 cat /tmp/review_prompt.txt | gemini --yolo -p > /tmp/review_output.txt 2>&1
          exit_code=$?
          review_output=$(cat /tmp/review_output.txt)

          echo "OAuth attempt completed with exit code: $exit_code"

          # If OAuth fails or requires manual authentication, immediately try API key
          if [ $exit_code -ne 0 ] || echo "$review_output" | grep -q "Code Assist login required\|authentication\|login"; then
            echo "üîÑ OAuth failed, switching to API key authentication..."

            # Try API key fallback if available
            if [ -n "$GEMINI_API_KEY" ]; then
              # Create settings for API key authentication
              echo '{"selectedAuthType": "gemini-api-key"}' > $HOME/.gemini/settings.json

              echo "üîë Retrying with API key..."
              timeout 60 cat /tmp/review_prompt.txt | gemini --yolo -p > /tmp/review_output.txt 2>&1
              exit_code=$?
              review_output=$(cat /tmp/review_output.txt)

              if [ $exit_code -eq 0 ] && [ -n "$review_output" ]; then
                echo "‚úÖ Successfully authenticated with API key!"
              else
                echo "‚ùå API key authentication also failed"
                echo "Full CLI output for debugging:"
                echo "$review_output"
                exit 1
              fi
            else
              echo "‚ùå No API key available for fallback"
              echo "OAuth failed and no API key provided"
              echo "Full CLI output for debugging:"
              echo "$review_output"
              exit 1
            fi
          else
            echo "‚úÖ OAuth authentication successful!"
          fi
          
          # Debug: Check the output
          if [ -n "$review_output" ]; then
            echo "‚úÖ Review output generated (${#review_output} characters)"
            echo "First 200 characters of review:"
            echo "$review_output" | head -c 200
          else
            echo "‚ùå No review output generated"
            echo "Exit code: $exit_code"
            echo "Full CLI output for debugging:"
            echo "$review_output"
            echo "This might indicate an authentication or CLI issue"
            exit 1
          fi
          
          # Clean up
          rm -f /tmp/review_prompt.txt
          rm -f /tmp/review_output.txt
          rm -f /tmp/diff_content.txt
          rm -f $HOME/.gemini/settings.json
          rm -f $HOME/.gemini/oauth_creds.json
          
          # Use a unique delimiter for GITHUB_OUTPUT
          DELIMITER=$(openssl rand -hex 16)
          
          printf "review<<%s\n%s\n%s\n" "$DELIMITER" "$review_output" "$DELIMITER" >> $GITHUB_OUTPUT

      - name: Post Review Comment
        env:
          GITHUB_TOKEN: ${{ github.token }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REVIEW_OUTPUT: ${{ steps.gemini_review.outputs.review }}
        run: |
          # Create a temporary file for the review comment to avoid shell expansion issues
          echo "**Gemini Code Review:**" > /tmp/review_comment.md
          echo "" >> /tmp/review_comment.md
          echo "$REVIEW_OUTPUT" >> /tmp/review_comment.md
          echo "" >> /tmp/review_comment.md
          echo "---" >> /tmp/review_comment.md
          echo "" >> /tmp/review_comment.md
          echo "ü§ñ *This PR review was generated using [kno-gemini-cli](https://github.com/kno2gether/kno-gemini-cli), a fork of Gemini CLI that enables automated PR reviews for FREE. Made with ‚ù§Ô∏è by [Kno2gether](https://www.youtube.com/@kno2gether). Subscribe to our channel for more developer tools and tutorials!*" >> /tmp/review_comment.md

          # Post the comment using the file
          gh pr comment $PR_NUMBER --body-file /tmp/review_comment.md

          # Clean up
          rm /tmp/review_comment.md
